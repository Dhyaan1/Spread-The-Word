<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Supabase.Realtime</name>
    </assembly>
    <members>
        <member name="T:Supabase.Realtime.Broadcast.BroadcastOptions">
            <summary>
            Options 
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Broadcast.BroadcastOptions.BroadcastSelf">
            <summary>
            self option enables client to receive message it broadcast
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Broadcast.BroadcastOptions.BroadcastAck">
            <summary>
            ack option instructs server to acknowledge that broadcast message was received
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Broadcast.BroadcastOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes broadcast options
            </summary>
            <param name="broadcastSelf"></param>
            <param name="broadcastAck"></param>
        </member>
        <member name="T:Supabase.Realtime.Channel.ChannelOptions">
            <summary>
            Channel Options
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.ChannelOptions.RetrieveAccessToken">
            <summary>
            A function that returns the current access token.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.ChannelOptions.Parameters">
            <summary>
            Parameters that are sent to the channel when opened (JSON Serializable)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.ChannelOptions.ClientOptions">
            <summary>
            The Client Options
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.ChannelOptions.SerializerSettings">
            <summary>
            The Serializer Settings
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Channel.ChannelOptions.#ctor(Supabase.Realtime.ClientOptions,System.Func{System.String},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            The Channel Options (typically only called from within the <see cref="T:Supabase.Realtime.Client"/>)
            </summary>
            <param name="clientOptions"></param>
            <param name="retrieveAccessToken"></param>
            <param name="serializerSettings"></param>
        </member>
        <member name="T:Supabase.Realtime.Channel.Push">
             <summary>
             Class representation of a single request sent to the Socket server.
            
             `Push` also adds additional functionality for retrying, timeouts, and listeners
             for its associated response from the server.
             </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.IsSent">
            <summary>
            Flag representing the `sent` state of a request.
            </summary>
        </member>
        <member name="E:Supabase.Realtime.Channel.Push.OnTimeout">
            <summary>
            Invoked when this `Push` has not been responded to within the timeout interval.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.Response">
            <summary>
            Accessor for the returned Socket Response
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.Channel">
            <summary>
            The associated channel.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.EventName">
            <summary>
            The event requested.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.Payload">
            <summary>
            Payload of data to be sent.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.Message">
            <summary>
            Represents the Pushed (sent) Message
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Channel.Push.Ref">
            <summary>
            Ref Of this Message
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Channel.Push._messageEventHandlers">
            <summary>
            Handlers for notifications of message events.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.#ctor(Supabase.Realtime.Interfaces.IRealtimeSocket,Supabase.Realtime.RealtimeChannel,System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initializes a single request that will be `Pushed` to the Socket server.
            </summary>
            <param name="socket"></param>
            <param name="channel"></param>
            <param name="eventName"></param>
            <param name="type"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.Resend(System.Int32)">
            <summary>
            Resends a `Push` request.
            </summary>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.Send">
            <summary>
            Sends a `Push` request and initializes the Timeout.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.StartTimeout">
            <summary>
            Keeps an internal timer for raising an event if this message is not responded to.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.HandleSocketMessageReceived(Supabase.Realtime.Interfaces.IRealtimeSocket,Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Handles when a socket message is received for this push.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.AddMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimePush{Supabase.Realtime.RealtimeChannel,Supabase.Realtime.Socket.SocketResponse}.MessageEventHandler)">
            <summary>
            Adds a listener to be notified when a message is received.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.RemoveMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimePush{Supabase.Realtime.RealtimeChannel,Supabase.Realtime.Socket.SocketResponse}.MessageEventHandler)">
            <summary>
            Removes a specified listener from messages received.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.NotifyMessageReceived(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Notifies all listeners that the socket has received a message
            </summary>
            <param name="messageResponse"></param>
        </member>
        <member name="M:Supabase.Realtime.Channel.Push.ClearMessageReceivedHandler">
            <summary>
            Clears all of the listeners from receiving event state changes.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Client">
             <summary>
             Singleton that represents a Client connection to a Realtime Server.
            
             It maintains a singular Websocket with asynchronous listeners (RealtimeChannels).
             </summary>
             <example>
                 client = Client.Instance
             </example>
        </member>
        <member name="P:Supabase.Realtime.Client.Subscriptions">
            <summary>
            Exposes all Realtime RealtimeChannel Subscriptions for R/O public consumption 
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Client.Socket">
             <summary>
             The backing Socket class.
            
             Most methods of the Client act as proxies to the Socket class.
             </summary>
        </member>
        <member name="P:Supabase.Realtime.Client.Options">
            <summary>
            Client Options - most of which are regarding Socket connection Options
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Client.SerializerSettings">
             <summary>
             Custom Serializer resolvers and converters that will be used for encoding and decoding Postgrest JSON responses.
            
             By default, Postgrest seems to use a date format that C# and Newtonsoft do not like, so this initial
             configuration handles that.
             </summary>
        </member>
        <member name="P:Supabase.Realtime.Client.AccessToken">
            <summary>
            JWT Access token for WALRUS security
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Client._socketEventHandlers">
            <summary>
            Handlers for notifications of state changes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Supabase.Realtime.Client._subscriptions" -->
        <member name="M:Supabase.Realtime.Client.#ctor(System.String,Supabase.Realtime.ClientOptions)">
            <summary>
            Initializes a Client instance, this method should be called prior to any other method.
            </summary>
            <param name="realtimeUrl">The connection url (ex: "ws://localhost:4000/socket" - no trailing slash required)</param>
            <param name="options"></param>
            <returns>Client</returns>
        </member>
        <member name="M:Supabase.Realtime.Client.ConnectAsync">
             <summary>
             Attempts to connect to the Socket.
            
             Returns when socket has successfully connected.
             </summary>
             <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Client.Connect(System.Action{Supabase.Realtime.Interfaces.IRealtimeClient{Supabase.Realtime.RealtimeSocket,Supabase.Realtime.RealtimeChannel},Supabase.Realtime.Exceptions.RealtimeException})">
             <summary>
             Attempts to connect to the socket.
            
             Provides a callback for `Task` driven returns.
             </summary>
             <param name="callback"></param>
             <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Client.AddStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeClient{Supabase.Realtime.RealtimeSocket,Supabase.Realtime.RealtimeChannel}.SocketStateEventHandler)">
            <summary>
            Adds a listener to be notified when the socket state changes.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Client.RemoveStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeClient{Supabase.Realtime.RealtimeSocket,Supabase.Realtime.RealtimeChannel}.SocketStateEventHandler)">
            <summary>
            Removes a specified listener from socket state changes.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Client.ClearStateChangedHandlers">
            <summary>
            Clears all of the listeners from receiving socket state changes.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Client.NotifySocketStateChange(Supabase.Realtime.Constants.SocketState)">
             <summary>
             Notifies all listeners that the current user auth state has changed.
            
             This is mainly used internally to fire notifications - most client applications won't need this.
             </summary>
             <param name="stateChanged"></param>
        </member>
        <member name="M:Supabase.Realtime.Client.AddDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Adds a debug handler, likely used within a logging solution of some kind.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Client.RemoveDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Removes a debug handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Client.ClearDebugHandlers">
            <summary>
            Clears debug handlers;
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Client.HandleSocketHeartbeat(Supabase.Realtime.Interfaces.IRealtimeSocket,Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Sets the current Access Token every heartbeat (see: https://github.com/supabase/realtime-js/blob/59bd47956ebe4e23b3e1a6c07f5fe2cfe943e8ad/src/RealtimeClient.ts#L437)
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Client.Disconnect(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Disconnects from the socket server (if connected).
            </summary>
            <param name="code">Status Code</param>
            <param name="reason">Reason for disconnect</param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Client.SetAuth(System.String)">
            <summary>
            Sets the JWT access token used for channel subscription authorization and Realtime RLS.
            Ref: https://github.com/supabase/realtime-js/pull/117 | https://github.com/supabase/realtime-js/pull/117
            </summary>
            <param name="jwt"></param>
        </member>
        <member name="M:Supabase.Realtime.Client.Channel(System.String)">
            <summary>
            Adds a RealtimeChannel subscription - if a subscription exists with the same signature, the existing subscription will be returned.
            </summary>
            <param name="channelName">The name of the Channel to join (totally arbitrary)</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Supabase.Realtime.Client.Channel(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a RealtimeChannel subscription - if a subscription exists with the same signature, the existing subscription will be returned.
            </summary>
            <param name="database">Database to connect to, with Supabase this will likely be `realtime`.</param>
            <param name="schema">Postgres schema, usually `public`</param>
            <param name="table">Postgres table name</param>
            <param name="column">Postgres column name</param>
            <param name="value">Value the specified column should have</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Client.Remove(Supabase.Realtime.RealtimeChannel)">
            <summary>
            Removes a channel subscription.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:Supabase.Realtime.Client.DefaultMessageEncoder(System.Object,System.Action{System.String})">
             <summary>
             The default socket message encoder, used to serialize <see cref="T:Supabase.Realtime.Channel.JoinPush"/> messages to the socket
             server.
            
             It is unlikely that this will be overriden by the developer.
             </summary>
             <param name="payload"></param>
             <param name="callback"></param>
        </member>
        <member name="M:Supabase.Realtime.Client.DefaultMessageDecoder(System.String,System.Action{Supabase.Realtime.Socket.SocketResponse})">
             <summary>
             The default socket message decoder, used to deserialize messages from the socket server.
             Ref: <see cref="T:Supabase.Realtime.Socket.SocketResponse`1"/>
            
             It is unlikely that this will be overriden by the developer. 
             </summary>
             <param name="payload"></param>
             <param name="callback"></param>
        </member>
        <member name="T:Supabase.Realtime.ClientOptions">
            <summary>
            Options used when initializing a <see cref="T:Supabase.Realtime.Client"/>
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.Encode">
            <summary>
            The function to encode outgoing messages. Defaults to JSON
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.Decode">
            <summary>
            The function to decode incoming messages.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.Transport">
            <summary>
            The Websocket Transport, for example WebSocket.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.Timeout">
            <summary>
            The default timeout in milliseconds to trigger push timeouts.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.EventsPerSecond">
            <summary>
            @todo Presently unused: Limit the number of events that can be sent per second.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.HeartbeatInterval">
            <summary>
            The interval to send a heartbeat message
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.ReconnectAfterInterval">
            <summary>
            The interval to reconnect
            </summary>
        </member>
        <member name="F:Supabase.Realtime.ClientOptions.Headers">
            <summary>
            Request headers to be appended to the connection string.
            </summary>
        </member>
        <member name="F:Supabase.Realtime.ClientOptions.Parameters">
            <summary>
            The optional params to pass when connecting
            </summary>
        </member>
        <member name="F:Supabase.Realtime.ClientOptions.DateTimeStyles">
            <summary>
            Datetime Style for JSON Deserialization of Models
            </summary>
        </member>
        <member name="P:Supabase.Realtime.ClientOptions.DateTimeFormat">
            <summary>
            Datetime format for JSON Deserialization of Models (Postgrest style)
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Constants">
            <summary>
            Shared constants for Realtime
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Constants.SocketState">
            <summary>
            The Current Socket state, used in <see cref="T:Supabase.Realtime.RealtimeSocket"/>
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.SocketState.Open">
            <summary>
            Socket Open
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.SocketState.Close">
            <summary>
            Socket Closed
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.SocketState.Reconnect">
            <summary>
            Socket is Reconnecting
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.SocketState.Error">
            <summary>
            Socket has errored
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Constants.ChannelState">
            <summary>
            Mapping of channel states, used with <see cref="T:Supabase.Realtime.RealtimeChannel"/>
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelState.Closed">
            <summary>
            Channel is closed
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelState.Errored">
            <summary>
            Channel has errored
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelState.Joined">
            <summary>
            Channel is joined
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelState.Joining">
            <summary>
            Channel is joining
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelState.Leaving">
            <summary>
            Channel is leaving
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Constants.EventType">
            <summary>
            A channel event type used and parsed in a <see cref="T:Supabase.Realtime.Socket.SocketResponse"/>
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.Insert">
            <summary>
            postgres_changes `Insert` event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.Update">
            <summary>
            postgres_changes `Update` event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.Delete">
            <summary>
            postgres_changes `Delete` event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.Broadcast">
            <summary>
            A broadcast event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.PresenceState">
            <summary>
            A presence `state` or `sync` event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.PresenceDiff">
            <summary>
            A presence `leave` or `join` event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.PostgresChanges">
            <summary>
            The catchall event for `postgres_changes`, parsed into a more specific `Insert`, `Update` or `Delete`
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.System">
            <summary>
            A system event (likely unused by the developer)
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.Internal">
            <summary>
            An internal event (likely unused by the developer)
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.EventType.Unknown">
            <summary>
            A presently unknown event, if this is seen, please open an issue at https://github.com/supabase-community/realtime-csharp
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Constants.PresenceListenEventTypes">
            <summary>
            Map of Presence listener types, used with: <see cref="T:Supabase.Realtime.RealtimePresence`1"/>
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.PresenceListenEventTypes.Sync">
            <summary>
            A sync event (either join or leave)
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.PresenceListenEventTypes.Join">
            <summary>
            A join event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.PresenceListenEventTypes.Leave">
            <summary>
            A leave event
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Constants.ChannelEventName">
            <summary>
            Mapping for event names that can be used with <see cref="M:Supabase.Realtime.RealtimeChannel.Push(System.String,System.String,System.Object,System.Int32)"/> to send arbitrary data.
            This is unlikely to be used by the developer.
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventName.Broadcast">
            <summary>
            The broadcast event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventName.Presence">
            <summary>
            The Presence event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventName.PostgresChanges">
            <summary>
            A postgres_changes event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.DefaultTimeout">
            <summary>
            Timeout interval for requests (used in Socket and Push)
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventClose">
            <summary>
            Phoenix Socket Server Event: CLOSE
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventError">
            <summary>
            Phoenix Socket Server Event: ERROR
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventJoin">
            <summary>
            Phoenix Socket Server Event: JOIN
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventReply">
            <summary>
            Phoenix Socket Server Event: REPLY
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventSystem">
            <summary>
            Phoenix Socket Server Event: SYSTEM
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventLeave">
            <summary>
            Phoenix Socket Server Event: LEAVE
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.PhoenixStatusOk">
            <summary>
            Phoenix Server Event: OK
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventPostgresChanges">
            <summary>
            Phoenix Server Event: POSTGRES_CHANGES
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventBroadcast">
            <summary>
            Phoenix Server Event: BROADCAST
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventPresenceState">
            <summary>
            Phoenix Server Event: PRESENCE_STATE
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelEventPresenceDiff">
            <summary>
            Phoenix Server Event: PRESENCE_DIFF
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.PhoenixStatusError">
            <summary>
            Phoenix Server Event: ERROR
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.TransportWebsocket">
            <summary>
            The transport type, used with Phoenix server implementations and appended on the <see cref="P:Supabase.Realtime.RealtimeSocket.EndpointUrl"/>
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Constants.ChannelAccessToken">
            <summary>
            The event name used to send an access_token to the Phoenix server
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Converters.IntArrayConverter">
            <summary>
            An int array converter that specifically parses Postgrest styled arrays `{1,2,3}` and `[1,2,3]` from strings
            into a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Converters.IntArrayConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Supabase.Realtime.Converters.IntArrayConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Converters.IntArrayConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Converters.IntArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Converters.IntArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Supabase.Realtime.Converters.StringArrayConverter">
            <summary>
            An string array converter that specifically parses Postgrest styled arrays `{big,string,array}` and `[1,2,3]`
            from strings into a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Converters.StringArrayConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Supabase.Realtime.Converters.StringArrayConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Converters.StringArrayConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Converters.StringArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Converters.StringArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Supabase.Realtime.CustomContractResolver">
            <summary>
            A custom resolver that handles mapping column names and property names as well
            as handling the conversion of Postgrest Ranges to a C# `Range`.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Debugger">
            <summary>
            A Singleton used for debug notifications
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Debugger.Instance">
            <summary>
            Returns the Singleton Instance.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Debugger.AddDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Adds a debug listener
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Debugger.RemoveDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Removes a debug handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Debugger.ClearDebugHandlers">
            <summary>
            Clears debug handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Debugger.Log(System.Object,System.String,System.Exception)">
            <summary>
            Notifies debug listeners.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Supabase.Realtime.Exceptions.FailureHint">
            <summary>
            A failure hint
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Exceptions.FailureHint.Reason">
            <summary>
            Reasons for a failure
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.Unknown">
            <summary>
            Catchall for any kind of failure that is presently untyped.
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.PushTimeout">
            <summary>
            A push timeout
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.ChannelNotOpen">
            <summary>
            Channel is not open
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.ChannelJoinFailure">
            <summary>
            Channel cannot be joined
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.SocketError">
            <summary>
            Socket has errored, either in connection or reconnection.
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.ConnectionLost">
            <summary>
            Connection has been lost
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Exceptions.FailureHint.Reason.ConnectionStale">
            <summary>
            No message has been received, usually given by server.
            If seen, please open an issue.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Exceptions.FailureHint.Parse(Websocket.Client.DisconnectionInfo)">
            <summary>
            Parses a Failure reason from a <see cref="T:Websocket.Client.DisconnectionInfo"/>
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Supabase.Realtime.Exceptions.RealtimeException">
            <summary>
            An Exception thrown within <see cref="N:Supabase.Realtime"/>
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Exceptions.RealtimeException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Exceptions.RealtimeException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Supabase.Realtime.Exceptions.RealtimeException.Reason">
            <summary>
            A specific reason for this exception, as provided by this library.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Exceptions.RealtimeException.FromDisconnectionInfo(Websocket.Client.DisconnectionInfo)">
            <summary>
            Creates exception from a <see cref="T:Websocket.Client.DisconnectionInfo"/> instance.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeBroadcast">
            <summary>
            A contract representing a realtime broadcast
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler">
            <summary>
            A delegate for broadcast events  
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeBroadcast.AddBroadcastEventHandler(Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler)">
            <summary>
            Adds a broadcast event handler
            </summary>
            <param name="broadcastEventHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeBroadcast.RemoveBroadcastEventHandler(Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler)">
            <summary>
            Removes a broadcast event handler
            </summary>
            <param name="broadcastEventHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeBroadcast.ClearBroadcastEventHandlers">
            <summary>
            Clears all broadcast event handlers
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeBroadcast.Send(System.String,System.Object,System.Int32)">
            <summary>
            Sends a broadcast to a given event name with an arbitrary, serializable payload.
            </summary>
            <param name="broadcastEventName"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeBroadcast.TriggerReceived(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            An internal trigger used for notifying event delegates.
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeChannel">
            <summary>
            A contract representing a realtime channel
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler">
            <summary>
            Delegate for messages received on this channel
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler">
            <summary>
            Delegate for channel state changes
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler">
            <summary>
            Delegate for postgres changes
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler">
            <summary>
            Delegate for errors on this channel
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.HasJoinedOnce">
            <summary>
            If this channel has been successfully joined (and thus, should be rejoined on a failure)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.IsClosed">
            <summary>
            Is channel closed?
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.IsErrored">
            <summary>
            Is channel erroring?
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.IsJoined">
            <summary>
            Is channel joined?
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.IsJoining">
            <summary>
            Is channel being joined?
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.IsLeaving">
            <summary>
            Is channel leaving?
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.Options">
            <summary>
            The Channel's initialization options
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.BroadcastOptions">
            <summary>
            The Channel's broadcast options (used prior to <see cref="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)"/>)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.PresenceOptions">
            <summary>
            The Channel's presence options (used prior to <see cref="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)"/>)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesOptions">
            <summary>
            The Channel's postgres_changes options (used prior to <see cref="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)"/>)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.State">
            <summary>
            The Channel's current state
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeChannel.Topic">
            <summary>
            A string representing this channel's topic, used for identifying/repeat access to this channel.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.AddStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler)">
            <summary>
            Add a state changed listener
            </summary>
            <param name="stateChangedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.RemoveStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler)">
            <summary>
            Remove a state changed handler
            </summary>
            <param name="stateChangedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.ClearStateChangedHandlers">
            <summary>
            Clear state changed handlers
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.AddMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler)">
            <summary>
            Add a message received handler
            </summary>
            <param name="messageReceivedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.RemoveMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler)">
            <summary>
            Remove a message received handler.
            </summary>
            <param name="messageReceivedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.ClearMessageReceivedHandlers">
            <summary>
            Clear message received handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.AddPostgresChangeHandler(Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType,Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler)">
            <summary>
            Add a postgres_changes handler
            </summary>
            <param name="listenType"></param>
            <param name="postgresChangeHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.RemovePostgresChangeHandler(Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType,Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler)">
            <summary>
            Remove a postgres_changes handler
            </summary>
            <param name="listenType"></param>
            <param name="postgresChangeHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.ClearPostgresChangeHandlers">
            <summary>
            Clear postgres_changes handlers
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.AddErrorHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler)">
            <summary>
            Add an error handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.RemoveErrorHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler)">
            <summary>
            Remove an error handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.ClearErrorHandlers">
            <summary>
            Clear error handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Broadcast">
            <summary>
            Get the <see cref="T:Supabase.Realtime.Interfaces.IRealtimeBroadcast"/> helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Presence">
            <summary>
            Get the <see cref="T:Supabase.Realtime.Interfaces.IRealtimePresence"/> helper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Push(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Push an arbitrary event to a subscribed channel.
            </summary>
            <param name="eventName"></param>
            <param name="type"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Rejoin(System.Int32)">
            <summary>
            Rejoin a channel.
            </summary>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Send(Supabase.Realtime.Constants.ChannelEventName,System.String,System.Object,System.Int32)">
            <summary>
            Send an arbitrary event with an awaitable task.
            </summary>
            <param name="eventType"></param>
            <param name="type"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Register``1(System.Boolean,System.Boolean)">
            <summary>
            Register broadcast options, must be called to use <see cref="T:Supabase.Realtime.Interfaces.IRealtimeBroadcast"/>, and prior to <see cref="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)"/>
            </summary>
            <param name="broadcastSelf"></param>
            <param name="broadcastAck"></param>
            <typeparam name="TBroadcastResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Register``1(System.String)">
            <summary>
            Register presence options, must be called to use <see cref="T:Supabase.Realtime.Interfaces.IRealtimePresence"/>, and prior to <see cref="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)"/>
            </summary>
            <param name="presenceKey"></param>
            <typeparam name="TPresenceResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Register(Supabase.Realtime.PostgresChanges.PostgresChangesOptions)">
            <summary>
            Register postgres_changes options, must be called to use <see cref="T:Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler"/>, and
            prior to <see cref="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)"/>
            </summary>
            <param name="postgresChangesOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Subscribe(System.Int32)">
            <summary>
            Subscribes to a channel.
            </summary>
            <param name="timeoutMs"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeChannel.Unsubscribe">
            <summary>
            Unsubscribes from a channel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeClient`2">
            <summary>
            Contract representing a Realtime Client
            </summary>
            <typeparam name="TSocket"></typeparam>
            <typeparam name="TChannel"></typeparam>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.Options">
            <summary>
            The options initializing this client.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.SerializerSettings">
            <summary>
            Json serializer settings
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.Socket">
            <summary>
            The connected realtime socket
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.Subscriptions">
            <summary>
            A collection of channels ordered by topic name
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeClient`2.SocketStateEventHandler">
            <summary>
            Delegate for handling a socket state event, this can be seen as synonymous with the Client's state.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.AddStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeClient{`0,`1}.SocketStateEventHandler)">
            <summary>
            Add a Socket State listener
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.RemoveStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeClient{`0,`1}.SocketStateEventHandler)">
            <summary>
            Remove a Socket State listener
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.ClearStateChangedHandlers">
            <summary>
            Clear socket state listeners
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.AddDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Adds a debug handler, likely used within a logging solution of some kind.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.RemoveDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Removes a debug handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.ClearDebugHandlers">
            <summary>
            Clears debug handlers;
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.Channel(System.String)">
            <summary>
            Initialize a new channel with an arbitrary channel name.
            </summary>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.Channel(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shorthand initialization of a channel with postgres_changes options already set. 
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
            <param name="table"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.Connect(System.Action{Supabase.Realtime.Interfaces.IRealtimeClient{`0,`1},Supabase.Realtime.Exceptions.RealtimeException})">
            <summary>
            Connect to the <see cref="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.Socket"/>
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.ConnectAsync">
            <summary>
            Connect to the <see cref="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.Socket"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.Disconnect(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Disconnect from the <see cref="P:Supabase.Realtime.Interfaces.IRealtimeClient`2.Socket"/>
            </summary>
            <param name="code"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.Remove(`1)">
            <summary>
            Remove an initialized <see cref="T:Supabase.Realtime.Interfaces.IRealtimeChannel"/>
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeClient`2.SetAuth(System.String)">
            <summary>
            Sets the authentication JWT to be passed into all realtime channels. Used for WALRUS permissions.
            </summary>
            <param name="jwt"></param>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeDebugger">
            <summary>
            Contract representing an internal debugger.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler">
            <summary>
            A debug event handler
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeDebugger.AddDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Adds a debug listener
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeDebugger.RemoveDebugHandler(Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler)">
            <summary>
            Removes a debug handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeDebugger.ClearDebugHandlers">
            <summary>
            Clears debug handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeDebugger.Log(System.Object,System.String,System.Exception)">
            <summary>
            Notifies debug listeners
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimePresence">
            <summary>
            Contract representing a Realtime Presence class
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler">
            <summary>
            Delegate for a presence event.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimePresence.EventType">
            <summary>
            Mapping of presence event types
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Interfaces.IRealtimePresence.EventType.Sync">
            <summary>
            Sync event (both join and leave)
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Interfaces.IRealtimePresence.EventType.Join">
            <summary>
            Join event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Interfaces.IRealtimePresence.EventType.Leave">
            <summary>
            Leave event
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePresence.Track(System.Object,System.Int32)">
            <summary>
            Send an arbitrary payload as a presence event, MUST be called once to register this client as an active presence.
            </summary>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePresence.AddPresenceEventHandler(Supabase.Realtime.Interfaces.IRealtimePresence.EventType,Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler)">
            <summary>
            Add a presence event handler
            </summary>
            <param name="eventType"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePresence.RemovePresenceEventHandlers(Supabase.Realtime.Interfaces.IRealtimePresence.EventType,Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler)">
            <summary>
            Remove a presence event handler
            </summary>
            <param name="eventType"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePresence.ClearPresenceEventHandlers(System.Nullable{Supabase.Realtime.Interfaces.IRealtimePresence.EventType})">
            <summary>
            Clear presence events.
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimePush`2">
            <summary>
            Contract representing a "Push" or an outgoing message to the socket server
            </summary>
            <typeparam name="TChannel"></typeparam>
            <typeparam name="TSocketResponse"></typeparam>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimePush`2.MessageEventHandler">
            <summary>
            Delegate for a message event.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePush`2.AddMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimePush{`0,`1}.MessageEventHandler)">
            <summary>
            Add a message received handler 
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePush`2.RemoveMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimePush{`0,`1}.MessageEventHandler)">
            <summary>
            Remove a message received handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePush`2.ClearMessageReceivedHandler">
            <summary>
            Clear Message received handlers.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.Channel">
            <summary>
            The calling or parent channel
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.EventName">
            <summary>
            The event name this push is registered under.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.IsSent">
            <summary>
            Is push sent?
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.Message">
            <summary>
            The wrapped SocketRequest
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.Payload">
            <summary>
            The payload (present in <see cref="P:Supabase.Realtime.Interfaces.IRealtimePush`2.Message"/>)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.Ref">
            <summary>
            A unique ID representing this push.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimePush`2.Response">
            <summary>
            The server's response
            </summary>
        </member>
        <member name="E:Supabase.Realtime.Interfaces.IRealtimePush`2.OnTimeout">
            <summary>
            A timeout event handler.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePush`2.Resend(System.Int32)">
            <summary>
            Resend this push, only called on a failed push attempt.
            </summary>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimePush`2.Send">
            <summary>
            Send this push.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeSocket">
            <summary>
            Contract for a realtime socket.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeSocket.IsConnected">
            <summary>
            Is this socket connected?
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler">
            <summary>
            Delegate for errors on this socket
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler">
            <summary>
            Delegate for handling socket state changes.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler">
            <summary>
            Delegate for handling message received events.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler">
            <summary>
            Delegate for handling a heartbeat event.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.AddStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler)">
            <summary>
            Add a state changed handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.RemoveStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler)">
            <summary>
            Remove a state changed handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.ClearStateChangedHandlers">
            <summary>
            Clear state changed handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.AddMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler)">
            <summary>
            Add a message received handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.RemoveMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler)">
            <summary>
            Remove a message received handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.ClearMessageReceivedHandlers">
            <summary>
            Clear message received handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.AddHeartbeatHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler)">
            <summary>
            Add a heartbeat handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.RemoveHeartbeatHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler)">
            <summary>
            Remove heartbeat handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.ClearHeartbeatHandlers">
            <summary>
            Clear heartbeat handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.AddErrorHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler)">
            <summary>
            Add an error handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.RemoveErrorHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler)">
            <summary>
            Remove an error handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.ClearErrorHandlers">
            <summary>
            Clear error handlers.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.GetLatency">
            <summary>
            Gets the roundtrip time of a single message between client and server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.Connect">
            <summary>
            Connects to a socket
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.Disconnect(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Disconnects from a socket
            </summary>
            <param name="code"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.MakeMsgRef">
            <summary>
            Generates a Message ref, used in <see cref="M:Supabase.Realtime.Interfaces.IRealtimeSocket.Push(Supabase.Realtime.Socket.SocketRequest)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.Push(Supabase.Realtime.Socket.SocketRequest)">
            <summary>
            Push a <see cref="T:Supabase.Realtime.Socket.SocketRequest"/> to the <see cref="N:Supabase.Realtime.Socket"/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Supabase.Realtime.Interfaces.IRealtimeSocket.ReplyEventName(System.String)">
            <summary>
            The phoenix specific reply event name for a message.
            </summary>
            <param name="msgRef"></param>
            <returns></returns>
        </member>
        <member name="T:Supabase.Realtime.Interfaces.IRealtimeSocketResponse">
            <summary>
            Contract for a socket response
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeSocketResponse._event">
            <summary>
            The raw event name
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeSocketResponse.Event">
            <summary>
            The parsed event type
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeSocketResponse.Payload">
            <summary>
            The opinionated payload matching a <see cref="T:Supabase.Realtime.Socket.SocketResponsePayload"/>
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeSocketResponse.Ref">
            <summary>
            The unique id of this response
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Interfaces.IRealtimeSocketResponse.Topic">
            <summary>
            The topic.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Models.BaseBroadcast`1">
            <summary>
            Represents a Broadcast response with a modeled payload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Supabase.Realtime.Models.BaseBroadcast`1.Payload">
            <summary>
            The typed payload.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Models.BaseBroadcast">
            <summary>
            Represents an arbitrary Broadcast response.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Models.BaseBroadcast.Event">
            <summary>
            The event.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Models.BaseBroadcast.Payload">
            <summary>
            The payload.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Models.BasePresence">
            <summary>
            Represents an arbitrary Presence response.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Models.BasePresence.PhoenixRef">
            <summary>
            The ref for this event. (can be used to establish sequence)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Models.BasePresence.PhoenixPrevRef">
            <summary>
            The previous ref for this presence event (can be used to establish sequence)
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Models.BasePresence.ShouldSerializePhoenixRef">
            <summary>
            Disables serialization of phoenix_ref
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Models.BasePresence.ShouldSerializePhoenixPrevRef">
            <summary>
            Disables serialization of phoenix_prev_ref
            </summary>
            <returns></returns>
        </member>
        <member name="T:Supabase.Realtime.PostgresChanges.PostgresChangesOptions">
            <summary>
            Handles a `postgres_changes` channel
            
            For Example in the js client: 
            
            	const databaseFilter = {
            		schema: 'public',
            		table: 'messages',
            		filter: `room_id=eq.${channelId}`,
            		event: 'INSERT',
            	}
            
            Would translate to:
            
            	new PostgresChangesOptions("public", "messages", $"room_id=eq.{channelId}");
            </summary>
        </member>
        <member name="T:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType">
            <summary>
            Mapping of postgres changes listener types
            </summary>
        </member>
        <member name="F:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.All">
            <summary>
            All event
            </summary>
        </member>
        <member name="F:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.Inserts">
            <summary>
            INSERT events
            </summary>
        </member>
        <member name="F:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.Updates">
            <summary>
            UPDATE events
            </summary>
        </member>
        <member name="F:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.Deletes">
            <summary>
            DELETE events
            </summary>
        </member>
        <member name="P:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.Schema">
            <summary>
            The schema for this listener, likely: `public`
            </summary>
        </member>
        <member name="P:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.Table">
            <summary>
            The table for this listener, can be: `*` matching all tables in schema.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.Filter">
            <summary>
            The filter for this listener
            </summary>
        </member>
        <member name="P:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.Parameters">
            <summary>
            The parameters passed to the server
            </summary>
        </member>
        <member name="P:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.Event">
            <summary>
            The stringified event listener type
            </summary>
        </member>
        <member name="M:Supabase.Realtime.PostgresChanges.PostgresChangesOptions.#ctor(System.String,System.String,Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Postgres changes options.
            </summary>
            <param name="schema"></param>
            <param name="table"></param>
            <param name="eventType"></param>
            <param name="filter"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Supabase.Realtime.PostgresChanges.PostgresChangesResponse`1">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.PostgresChanges.PostgresChangesResponse`1.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Supabase.Realtime.PostgresChanges.PostgresChangesResponse">
            <summary>
            A postgres changes event.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.PostgresChanges.PostgresChangesResponse.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.PostgresChanges.PostgresChangesResponse.Model``1">
            <summary>
            Hydrates the referenced record into a Model (if possible).
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.PostgresChanges.PostgresChangesResponse.OldModel``1">
            <summary>
            Hydrates the old_record into a Model (if possible).
            
            NOTE: If you want to receive the "previous" data for updates and deletes, you will need to set `REPLICA IDENTITY to FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL`;
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Supabase.Realtime.PostgresChanges.PostgresChangesPayload`1">
            <summary>
            The payload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Supabase.Realtime.PostgresChanges.PostgresChangesPayload`1.Data">
            <summary>
            The payload data.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Presence.PresenceOptions">
            <summary>
            Options used to initialize Realtime Presence
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Presence.PresenceOptions.PresenceKey">
            <summary>
            key option is used to track presence payload across clients
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Presence.PresenceOptions.#ctor(System.String)">
            <summary>
            Presence options.
            </summary>
            <param name="presenceKey"></param>
        </member>
        <member name="T:Supabase.Realtime.Presence.RealtimePresenceDiff`1">
            <summary>
            Represents a presence_diff response
            </summary>
            <typeparam name="TPresence"></typeparam>
        </member>
        <member name="M:Supabase.Realtime.Presence.RealtimePresenceDiff`1.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Supabase.Realtime.Presence.PresenceDiffPayload`1">
            <summary>
            a Presence Diff payload
            </summary>
            <typeparam name="TPresence"></typeparam>
        </member>
        <member name="P:Supabase.Realtime.Presence.PresenceDiffPayload`1.Joins">
            <summary>
            The joining presences.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Presence.PresenceDiffPayload`1.Leaves">
            <summary>
            The leaving presences.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Presence.PresenceDiffPayloadMeta`1">
            <summary>
            A presence diff payload
            </summary>
            <typeparam name="TPresence"></typeparam>
        </member>
        <member name="P:Supabase.Realtime.Presence.PresenceDiffPayloadMeta`1.Metas">
            <summary>
            The metas containing current presences
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Presence.Responses.PresenceStateSocketResponse`1">
            <inheritdoc />
        </member>
        <member name="M:Supabase.Realtime.Presence.Responses.PresenceStateSocketResponse`1.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Supabase.Realtime.Presence.Responses.PresenceStatePayload`1">
            <summary>
            A presence state payload response
            </summary>
            <typeparam name="TPresence"></typeparam>
        </member>
        <member name="P:Supabase.Realtime.Presence.Responses.PresenceStatePayload`1.Metas">
            <summary>
            The metas containing joins and leaves
            </summary>
        </member>
        <member name="T:Supabase.Realtime.RealtimeBroadcast`1">
             <summary>
             Represents a realtime broadcast client.
             
             Broadcast follows the publish-subscribe pattern where a client publishes messages to a channel with a unique identifier.
             Other clients can elect to receive the message in real-time by subscribing to the channel with the same unique identifier. If these clients are online and subscribed then they will receive the message.
            
             Broadcast works by connecting your client to the nearest Realtime server, which will communicate with other servers to relay messages to other clients.
             A common use-case is sharing a user's cursor position with other clients in an online game.
             </summary>
             <typeparam name="TBroadcastModel">A model representing expected payload.</typeparam>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.Current">
            <summary>
            The last received broadcast.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.#ctor(Supabase.Realtime.RealtimeChannel,Supabase.Realtime.Broadcast.BroadcastOptions,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a realtime broadcast helper class.
            </summary>
            <param name="channel"></param>
            <param name="options"></param>
            <param name="serializerSettings"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.AddBroadcastEventHandler(Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler)">
            <summary>
            Adds a broadcast event listener.
            </summary>
            <param name="broadcastEventHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.RemoveBroadcastEventHandler(Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler)">
            <summary>
            Removes a broadcast event listener.
            </summary>
            <param name="broadcastEventHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.ClearBroadcastEventHandlers">
            <summary>
            Clears all broadcast event listeners
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.TriggerReceived(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Called by <see cref="T:Supabase.Realtime.RealtimeChannel"/> when a broadcast event is received, then parsed/typed here.
            </summary>
            <param name="response"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimeBroadcast`1.Send(System.String,System.Object,System.Int32)">
            <summary>
            Broadcasts an arbitrary payload
            </summary>
            <param name="broadcastEventName"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
        </member>
        <member name="T:Supabase.Realtime.RealtimeChannel">
            <summary>
            Class representation of a channel subscription
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.IsClosed">
            <summary>
            As to whether this Channel is Closed
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.IsErrored">
            <summary>
            As to if this Channel has Errored
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.IsJoined">
            <summary>
            As to if this Channel is currently Joined
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.IsJoining">
            <summary>
            As to if this Channel is currently Joining
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.IsLeaving">
            <summary>
            As to if this channel is currently leaving
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.Topic">
            <summary>
            The channel's topic (identifier)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.State">
            <summary>
            The Channel's current state.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.Options">
            <summary>
            Options passed to this channel instance.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.BroadcastOptions">
            <summary>
            The saved Broadcast Options, set in <see cref="M:Supabase.Realtime.RealtimeChannel.Register``1(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.PresenceOptions">
            <summary>
            The saved Presence Options, set in <see cref="M:Supabase.Realtime.RealtimeChannel.Register``1(System.String)"/>
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.PostgresChangesOptions">
            <summary>
            The saved Postgres Changes Options, set in <see cref="M:Supabase.Realtime.RealtimeChannel.Register(Supabase.Realtime.PostgresChanges.PostgresChangesOptions)"/>
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeChannel.HasJoinedOnce">
            <summary>
            Flag stating whether a channel has been joined once or not.
            </summary>
        </member>
        <member name="F:Supabase.Realtime.RealtimeChannel.IsSubscribed">
            <summary>
            Flag stating if a channel is currently subscribed.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Broadcast">
            <summary>
            Returns the <see cref="T:Supabase.Realtime.Interfaces.IRealtimeBroadcast"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Broadcast``1">
            <summary>
            Returns a typed <see cref="T:Supabase.Realtime.RealtimeBroadcast`1" /> instance.
            </summary>
            <typeparam name="TBroadcastModel"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Presence">
            <summary>
            Returns the <see cref="T:Supabase.Realtime.Interfaces.IRealtimePresence"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Presence``1">
            <summary>
            Returns a typed <see cref="T:Supabase.Realtime.RealtimePresence`1"/> instance.
            </summary>
            <typeparam name="TPresenceModel">Model representing a Presence payload</typeparam>
            <returns></returns>
        </member>
        <member name="F:Supabase.Realtime.RealtimeChannel.JoinPush">
            <summary>
            The initial request to join a channel (repeated on channel disconnect)
            </summary>
        </member>
        <member name="F:Supabase.Realtime.RealtimeChannel._buffer">
            <summary>
            Buffer of Pushes held because of Socket availability
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.#ctor(Supabase.Realtime.Interfaces.IRealtimeSocket,System.String,Supabase.Realtime.Channel.ChannelOptions)">
            <summary>
            Initializes a Channel - must call `Subscribe()` to receive events.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.HandleSocketStateChanged(Supabase.Realtime.Interfaces.IRealtimeSocket,Supabase.Realtime.Constants.SocketState)">
            <summary>
            Handles socket state changes, specifically when a socket reconnects this channel (if previously subscribed)
            should also rejoin.
            </summary>
            <param name="_"></param>
            <param name="state"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Register``1(System.Boolean,System.Boolean)">
            <summary>
            Registers a <see cref="T:Supabase.Realtime.RealtimeBroadcast`1"/> instance - allowing broadcast responses to be parsed.
            </summary>
            <typeparam name="TBroadcastResponse"></typeparam>
            <param name="broadcastSelf">enables client to receive message it has broadcast</param>
            <param name="broadcastAck">instructs server to acknowledge that broadcast message was received</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Register``1(System.String)">
            <summary>
            Registers a <see cref="T:Supabase.Realtime.RealtimePresence`1"/> instance - allowing presence responses to be parsed and state to be tracked.
            </summary>
            <typeparam name="TPresenceResponse">The model representing a presence payload.</typeparam>
            <param name="presenceKey">used to track presence payload across clients</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if called multiple times.</exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.AddStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler)">
            <summary>
            Registers a state changed listener relative to this channel. Called when channel state changes.
            </summary>
            <param name="stateChangedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.RemoveStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler)">
            <summary>
            Removes a channel state changed listener
            </summary>
            <param name="stateChangedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.ClearStateChangedHandlers">
            <summary>
            Clears all channel state changed listeners
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.NotifyStateChanged(Supabase.Realtime.Constants.ChannelState,System.Boolean)">
            <summary>
            Notifies registered listeners that a channel state has changed.
            </summary>
            <param name="state"></param>
            <param name="shouldRejoin"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.AddMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler)">
            <summary>
            Registers a message received listener, called when a socket message is received for this channel.
            </summary>
            <param name="messageReceivedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.RemoveMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler)">
            <summary>
            Removes a message received listener.
            </summary>
            <param name="messageReceivedHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.ClearMessageReceivedHandlers">
            <summary>
            Clears message received listeners.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.NotifyMessageReceived(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Notifies registered listeners that a channel message has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.AddPostgresChangeHandler(Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType,Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler)">
            <summary>
            Add a postgres changes listener. Should be paired with <see cref="M:Supabase.Realtime.RealtimeChannel.Register(Supabase.Realtime.PostgresChanges.PostgresChangesOptions)"/>.
            </summary>
            <param name="listenType">The type of event this callback should process.</param>
            <param name="postgresChangeHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.RemovePostgresChangeHandler(Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType,Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler)">
            <summary>
            Removes a postgres changes listener.
            </summary>
            <param name="listenType">The type of event this callback was registered to process.</param>
            <param name="postgresChangeHandler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.ClearPostgresChangeHandlers">
            <summary>
            Clears all postgres changes listeners.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.AddErrorHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler)">
            <summary>
            Adds an error event handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.RemoveErrorHandler(Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler)">
            <summary>
            Removes an error event handler
            </summary>
            <param name="handler"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.ClearErrorHandlers">
            <summary>
            Clears Error Event Handlers
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.NotifyPostgresChanges(Supabase.Realtime.Constants.EventType,Supabase.Realtime.PostgresChanges.PostgresChangesResponse)">
            <summary>
            Notifies listeners of a postgres change message being received.
            </summary>
            <param name="eventType"></param>
            <param name="response"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Register(Supabase.Realtime.PostgresChanges.PostgresChangesOptions)">
             <summary>
             Registers postgres_changes options, can be called multiple times.
            
             Should be paired with <see cref="M:Supabase.Realtime.RealtimeChannel.AddPostgresChangeHandler(Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType,Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler)"/>
             </summary>
             <param name="postgresChangesOptions"></param>
             <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Subscribe(System.Int32)">
            <summary>
            Subscribes to the channel given supplied Options/params.
            </summary>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Unsubscribe">
            <summary>
            Unsubscribes from the channel.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Push(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Sends a `Push` request under this channel.
            
            Maintains a buffer in the event push is called prior to the channel being joined.
            </summary>
            <param name="eventName"></param>
            <param name="type"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Send(Supabase.Realtime.Constants.ChannelEventName,System.String,System.Object,System.Int32)">
            <summary>
            Sends an arbitrary payload with a given payload type (<see cref="T:Supabase.Realtime.Constants.ChannelEventName"/>)
            </summary>
            <param name="eventName"></param>
            <param name="type"></param>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Rejoin(System.Int32)">
            <summary>
            Rejoins the channel.
            </summary>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.Enqueue(Supabase.Realtime.Channel.Push)">
            <summary>
            Enqueues a message.
            </summary>
            <param name="push"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.GenerateJoinPush">
            <summary>
            Generates the Join Push message by merging broadcast, presence, and postgres_changes options.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.GenerateAuthPush">
            <summary>
            Generates an auth push.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.HandleRejoinTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            If the channel errors internally (phoenix error, not transport) attempt rejoining.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.SendJoin(System.Int32)">
            <summary>
            Sends the phoenix server a join message.
            </summary>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.HandleJoinResponse(Supabase.Realtime.Interfaces.IRealtimePush{Supabase.Realtime.RealtimeChannel,Supabase.Realtime.Socket.SocketResponse},Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Handles a received join response (received after sending on subscribe/reconnection)
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeChannel.HandleSocketMessage(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Called when a socket message is received, parses the correct event handler to pass to.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Supabase.Realtime.RealtimePresence`1">
            <summary>
            Represents a realtime presence client.
            
            When a client subscribes to a channel, it will immediately receive the channel's latest state in a single message.
            Clients are free to come-and-go as they please, and as long as they are all subscribed to the same channel then they will all have the same Presence state as each other.
            If a client is suddenly disconnected (for example, they go offline), their state will be automatically removed from the shared state.
            </summary>
            <typeparam name="TPresenceModel">A model representing expected payload.</typeparam>
        </member>
        <member name="P:Supabase.Realtime.RealtimePresence`1.LastState">
            <summary>
            The Last State of this Presence instance.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimePresence`1.CurrentState">
            <summary>
            The Current State of this Presence instance.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.#ctor(Supabase.Realtime.RealtimeChannel,Supabase.Realtime.Presence.PresenceOptions,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a realtime presence helper class.
            </summary>
            <param name="channel"></param>
            <param name="options"></param>
            <param name="serializerSettings"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.AddPresenceEventHandler(Supabase.Realtime.Interfaces.IRealtimePresence.EventType,Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler)">
            <summary>
            Add presence event handler for a given event type.
            </summary>
            <param name="eventType"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.RemovePresenceEventHandlers(Supabase.Realtime.Interfaces.IRealtimePresence.EventType,Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler)">
            <summary>
            Remove an event handler
            </summary>
            <param name="eventType"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.ClearPresenceEventHandlers(System.Nullable{Supabase.Realtime.Interfaces.IRealtimePresence.EventType})">
            <summary>
            Clears all event handlers for a given type (if specified) or clears all handlers.
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.NotifyPresenceEventHandlers(Supabase.Realtime.Interfaces.IRealtimePresence.EventType)">
            <summary>
            Notifies listeners of state changes
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.TriggerSync(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Called in two cases:
            	- By `RealtimeChannel` when it receives a `presence_state` initializing message.
            	- By `RealtimeChannel` When a diff has been received and a new response is saved.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.TriggerDiff(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Triggers a diff comparison and emits events accordingly.
            </summary>
            <param name="response"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.Track(System.Object,System.Int32)">
            <summary>
            "Tracks" an event, used with <see cref="N:Supabase.Realtime.Presence"/>.
            </summary>
            <param name="payload"></param>
            <param name="timeoutMs"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.Untrack">
            <summary>
            Untracks an event.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimePresence`1.SetState">
            <summary>
            Sets the internal Presence State from the <see cref="F:Supabase.Realtime.RealtimePresence`1._currentResponse"/>
            </summary>
        </member>
        <member name="T:Supabase.Realtime.RealtimeSocket">
            <summary>
            Socket connection handler.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeSocket.IsConnected">
            <summary>
            Returns whether or not the connection is alive.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.RealtimeSocket.EndpointUrl">
            <summary>
            The Socket Endpoint
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.#ctor(System.String,Supabase.Realtime.ClientOptions)">
            <summary>
            Initializes this Socket instance.
            </summary>
            <param name="endpoint"></param>
            <param name="options"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.Connect">
            <summary>
            Connects to a socket server and registers event listeners.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.Disconnect(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Disconnects from the socket server.
            </summary>
            <param name="code"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.AddStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler)">
            <summary>
            Adds a listener to be notified when the socket state changes.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.RemoveStateChangedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler)">
            <summary>
            Removes a specified listener from socket state changes.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.NotifySocketStateChange(Supabase.Realtime.Constants.SocketState)">
            <summary>
            Notifies all listeners that the socket state has changed.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.ClearStateChangedHandlers">
            <summary>
            Clears all of the listeners from receiving event state changes.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.AddMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler)">
            <summary>
            Adds a listener to be notified when a message is received.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.RemoveMessageReceivedHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler)">
            <summary>
            Removes a specified listener from messages received.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.NotifyMessageReceived(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Notifies all listeners that the socket has received a message
            </summary>
            <param name="heartbeat"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.ClearMessageReceivedHandlers">
            <summary>
            Clears all of the listeners from receiving event state changes.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.AddHeartbeatHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler)">
            <summary>
            Adds a listener to be notified when a message is received.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.RemoveHeartbeatHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler)">
            <summary>
            Removes a specified listener from messages received.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.NotifyHeartbeatReceived(Supabase.Realtime.Socket.SocketResponse)">
            <summary>
            Notifies all listeners that the socket has received a heartbeat
            </summary>
            <param name="heartbeat"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.ClearHeartbeatHandlers">
            <summary>
            Clears all of the listeners from receiving event state changes.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.AddErrorHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler)">
            <summary>
            Adds an error event handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.RemoveErrorHandler(Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler)">
            <summary>
            Removes an error event handler
            </summary>
            <param name="handler"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.ClearErrorHandlers">
            <summary>
            Clears Error Event Handlers
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.Push(Supabase.Realtime.Socket.SocketRequest)">
             <summary>
             Pushes formatted data to the socket server.
            
             If the connection is not alive, the data will be placed into a buffer to be sent when reconnected.
             </summary>
             <param name="data"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.GetLatency">
            <summary>
            Returns the latency (in millis) of roundtrip time from socket to server and back.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.SendHeartbeat">
            <summary>
            Maintains a heartbeat connection with the socket server to prevent disconnection.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.HandleSocketOpened">
            <summary>
            Called when the socket opens, registers the heartbeat thread and cancels the reconnection timer.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.HandleSocketReconnectionHappened(Websocket.Client.Models.ReconnectionInfo)">
            <summary>
            The socket has reconnected (or connected)
            </summary>
            <param name="reconnectionInfo"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.HandleSocketDisconnectionHappened(Websocket.Client.DisconnectionInfo)">
            <summary>
            The socket has disconnected, called either through a socket closing or erroring.
            </summary>
            <param name="disconnectionInfo"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.HandleSocketMessage(Websocket.Client.ResponseMessage)">
            <summary>
            Parses a received socket message into a non-generic type.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.HandleSocketError(Websocket.Client.DisconnectionInfo)">
            <summary>
            Handles socket errors, increments reconnection count if a connection has been established at least once.
            </summary>
            <param name="disconnectionInfo"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.HandleSocketClosed(Websocket.Client.DisconnectionInfo)">
            <summary>
            Begins the reconnection thread with a progressively increasing interval.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.MakeMsgRef">
            <summary>
            Generates an incrementing identifier for message references - this reference is used
            to coordinate requests with their responses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.ReplyEventName(System.String)">
            <summary>
            Returns the expected reply event name based off a generated message ref.
            </summary>
            <param name="msgRef"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.DisposeConnection">
            <summary>
            Dispose of the web socket connection.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.RealtimeSocket.FlushBuffer">
            <summary>
            Flushes `Push` requests added while a socket was disconnected.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.Responses.PhoenixResponse">
            <summary>
            A generic, internal phoenix server response
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Socket.Responses.PhoenixResponse.Response">
            <summary>
            The response.
            </summary>
        </member>
        <member name="F:Supabase.Realtime.Socket.Responses.PhoenixResponse.Status">
            <summary>
            The status.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.SocketOptionsParameters">
            <summary>
            Options to initialize a socket.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketOptionsParameters.Token">
            <summary>
            A user token (used for WALRUS permissions)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketOptionsParameters.ApiKey">
            <summary>
            A Supabase hosted public key
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.SocketRequest">
            <summary>
            Representation of a Socket Request, used by <see cref="T:Supabase.Realtime.Channel.Push"/>
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketRequest.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketRequest.Topic">
            <summary>
            The topic being sent to
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketRequest.Event">
            <summary>
            The Event name
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketRequest.Payload">
            <summary>
            The json serializable payload
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketRequest.Ref">
            <summary>
            The unique ref for this request.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketRequest.JoinRef">
            <summary>
            The join ref (if applicable)
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.SocketResponse`1">
            <summary>
            A SocketResponse with support for Generically typed Payload
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Supabase.Realtime.Socket.SocketResponse`1.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse`1.Payload">
            <summary>
            The typed payload response
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.SocketResponse">
            <summary>
            Representation of a Socket Response.
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Socket.SocketResponse.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Represents a socket response
            </summary>
            <param name="serializerSettings"></param>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse.Topic">
            <summary>
            The internal realtime topic.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse._event">
            <summary>
            The internal, raw event given by the socket
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse.Event">
            <summary>
            The typed, parsed event given by this library. 
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse.Payload">
            <summary>
            The payload/response.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse.Ref">
            <summary>
            An internal reference to this particular feedback loop.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponse.Json">
            <summary>
            The raw JSON string of the received data.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.SocketResponsePayload`1">
            <inheritdoc />
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload`1.Record">
            <summary>
            The record referenced.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload`1.OldRecord">
            <summary>
            The previous state of the referenced record.
            </summary>
        </member>
        <member name="T:Supabase.Realtime.Socket.SocketResponsePayload">
            <summary>
            A socket response payload.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Columns">
            <summary>
            Displays Column information from the Database.
            
            Will always be an array but can be empty
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.CommitTimestamp">
            <summary>
            The timestamp of the commit referenced.
            
            Will either be a string or null
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Record">
            <summary>
            The record referenced.
            
            Will always be an object but can be empty.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.OldRecord">
            <summary>
            The previous state of the referenced record.
            
            Will always be an object but can be empty.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Schema">
            <summary>
            The Schema affected.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Table">
            <summary>
            The Table affected.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload._type">
            <summary>
            The action type performed (INSERT, UPDATE, DELETE, etc.)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Type">
            <summary>
            The parsed type.
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Status">
            <summary>
            Status of response
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Response">
            <summary>
            The unparsed response object
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Errors">
            <summary>
            Either null or an array of errors.
            See: https://github.com/supabase/walrus/#error-states
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Joins">
            <summary>
            Presence joins (parsed later)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Leaves">
            <summary>
            Presence leaves (parsed later)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Channel">
            <summary>
            The channel (system)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Extension">
            <summary>
            The extension (system)
            </summary>
        </member>
        <member name="P:Supabase.Realtime.Socket.SocketResponsePayload.Message">
            <summary>
            The message (system)
            </summary>
        </member>
        <member name="M:Supabase.Realtime.Utils.QueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Simple method to form a query string (albeit poorly) from a dictionary.
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Supabase.Realtime.Utils.GenerateChannelTopic(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a Channel topic string of format: `realtime{:schema?}{:table?}{:col.eq.:val?}`
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
            <param name="table"></param>
            <param name="col"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
